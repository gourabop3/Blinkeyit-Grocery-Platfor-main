const mongoose = require("mongoose");

const couponSchema = new mongoose.Schema(
  {
    code: {
      type: String,
      required: [true, "Coupon code is required"],
      unique: true,
      uppercase: true,
      trim: true,
      minlength: [3, "Coupon code must be at least 3 characters"],
      maxlength: [20, "Coupon code cannot exceed 20 characters"],
    },
    
    title: {
      type: String,
      required: [true, "Coupon title is required"],
      trim: true,
      maxlength: [100, "Title cannot exceed 100 characters"],
    },
    
    description: {
      type: String,
      trim: true,
      maxlength: [500, "Description cannot exceed 500 characters"],
    },
    
    // Coupon Type
    type: {
      type: String,
      enum: ["percentage", "fixed", "free_shipping", "bogo"], // Buy One Get One
      required: true,
    },
    
    // Discount Value
    value: {
      type: Number,
      required: true,
      min: [0, "Discount value cannot be negative"],
    },
    
    // Maximum discount amount (for percentage coupons)
    maxDiscountAmount: {
      type: Number,
      default: null,
    },
    
    // Minimum Order Amount
    minOrderAmount: {
      type: Number,
      default: 0,
      min: [0, "Minimum order amount cannot be negative"],
    },
    
    // Maximum Order Amount (optional)
    maxOrderAmount: {
      type: Number,
      default: null,
    },
    
    // Usage Limits
    usageLimit: {
      total: {
        type: Number,
        default: null, // null means unlimited
      },
      perUser: {
        type: Number,
        default: 1,
      },
    },
    
    // Current Usage Count
    usageCount: {
      type: Number,
      default: 0,
    },
    
    // Validity Period
    validFrom: {
      type: Date,
      required: true,
      default: Date.now,
    },
    
    validUntil: {
      type: Date,
      required: true,
    },
    
    // Status
    isActive: {
      type: Boolean,
      default: true,
    },
    
    // Applicable Products (empty array means all products)
    applicableProducts: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "Product",
    }],
    
    // Applicable Categories (empty array means all categories)
    applicableCategories: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
    }],
    
    // Applicable Sub-Categories
    applicableSubCategories: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "SubCategory",
    }],
    
    // User Restrictions
    applicableUsers: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    }], // Empty array means all users
    
    // Exclude Users
    excludedUsers: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    }],
    
    // First Order Only
    firstOrderOnly: {
      type: Boolean,
      default: false,
    },
    
    // Mobile App Only
    mobileAppOnly: {
      type: Boolean,
      default: false,
    },
    
    // Usage History
    usageHistory: [{
      userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true,
      },
      orderId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Order",
        required: true,
      },
      discountAmount: {
        type: Number,
        required: true,
      },
      usedAt: {
        type: Date,
        default: Date.now,
      },
    }],
    
    // Created by Admin
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    
    // Auto-generated coupons tracking
    isAutoGenerated: {
      type: Boolean,
      default: false,
    },
    
    // Campaign Information
    campaign: {
      name: String,
      type: String, // "welcome", "birthday", "seasonal", "loyalty", etc.
    },
  },
  {
    timestamps: true,
  }
);

// Virtual for checking if coupon is currently valid
couponSchema.virtual('isCurrentlyValid').get(function() {
  const now = new Date();
  return this.isActive && 
         this.validFrom <= now && 
         this.validUntil >= now &&
         (this.usageLimit.total === null || this.usageCount < this.usageLimit.total);
});

// Instance method to validate coupon for a specific user and order
couponSchema.methods.validateForOrder = function(userId, orderAmount, userOrderCount = 0, products = []) {
  const now = new Date();
  
  // Check if coupon is active
  if (!this.isActive) {
    return { valid: false, message: "This coupon is no longer active" };
  }
  
  // Check validity period
  if (this.validFrom > now) {
    return { valid: false, message: "This coupon is not yet valid" };
  }
  
  if (this.validUntil < now) {
    return { valid: false, message: "This coupon has expired" };
  }
  
  // Check total usage limit
  if (this.usageLimit.total !== null && this.usageCount >= this.usageLimit.total) {
    return { valid: false, message: "This coupon has reached its usage limit" };
  }
  
  // Check per-user usage limit
  const userUsageCount = this.usageHistory.filter(usage => usage.userId.toString() === userId.toString()).length;
  if (userUsageCount >= this.usageLimit.perUser) {
    return { valid: false, message: "You have already used this coupon the maximum number of times" };
  }
  
  // Check minimum order amount
  if (orderAmount < this.minOrderAmount) {
    return { valid: false, message: `Minimum order amount of ₹${this.minOrderAmount} required` };
  }
  
  // Check maximum order amount
  if (this.maxOrderAmount && orderAmount > this.maxOrderAmount) {
    return { valid: false, message: `Maximum order amount of ₹${this.maxOrderAmount} exceeded` };
  }
  
  // Check first order only restriction
  if (this.firstOrderOnly && userOrderCount > 0) {
    return { valid: false, message: "This coupon is valid only for first-time users" };
  }
  
  // Check user restrictions
  if (this.applicableUsers.length > 0 && !this.applicableUsers.includes(userId)) {
    return { valid: false, message: "This coupon is not applicable for your account" };
  }
  
  // Check excluded users
  if (this.excludedUsers.includes(userId)) {
    return { valid: false, message: "This coupon is not applicable for your account" };
  }
  
  return { valid: true, message: "Coupon is valid" };
};

// Instance method to calculate discount
couponSchema.methods.calculateDiscount = function(orderAmount, products = []) {
  let discount = 0;
  
  switch (this.type) {
    case "percentage":
      discount = (orderAmount * this.value) / 100;
      if (this.maxDiscountAmount && discount > this.maxDiscountAmount) {
        discount = this.maxDiscountAmount;
      }
      break;
      
    case "fixed":
      discount = Math.min(this.value, orderAmount);
      break;
      
    case "free_shipping":
      // This would be handled in the shipping calculation
      discount = 0; // Shipping discount handled separately
      break;
      
    case "bogo":
      // Buy One Get One - complex logic would be implemented based on products
      discount = 0; // Would calculate based on product matching logic
      break;
  }
  
  return Math.round(discount * 100) / 100; // Round to 2 decimal places
};

// Instance method to apply coupon to order
couponSchema.methods.applyToOrder = async function(userId, orderId, discountAmount) {
  // Add to usage history
  this.usageHistory.push({
    userId,
    orderId,
    discountAmount,
    usedAt: new Date(),
  });
  
  // Increment usage count
  this.usageCount += 1;
  
  return this.save();
};

// Static method to get active coupons
couponSchema.statics.getActiveCoupons = function() {
  const now = new Date();
  return this.find({
    isActive: true,
    validFrom: { $lte: now },
    validUntil: { $gte: now },
    $or: [
      { 'usageLimit.total': null },
      { $expr: { $lt: ['$usageCount', '$usageLimit.total'] } }
    ]
  }).sort({ createdAt: -1 });
};

// Static method to get user-specific coupons
couponSchema.statics.getUserCoupons = function(userId) {
  const now = new Date();
  return this.find({
    isActive: true,
    validFrom: { $lte: now },
    validUntil: { $gte: now },
    $or: [
      { applicableUsers: { $size: 0 } }, // No user restriction
      { applicableUsers: userId }
    ],
    excludedUsers: { $ne: userId },
    $or: [
      { 'usageLimit.total': null },
      { $expr: { $lt: ['$usageCount', '$usageLimit.total'] } }
    ]
  }).sort({ createdAt: -1 });
};

// Static method to generate welcome coupon
couponSchema.statics.generateWelcomeCoupon = async function(userId, createdBy) {
  const welcomeCoupon = new this({
    code: `WELCOME${Date.now().toString().slice(-6)}`,
    title: "Welcome Bonus",
    description: "Special discount for new users",
    type: "percentage",
    value: 10,
    maxDiscountAmount: 100,
    minOrderAmount: 299,
    usageLimit: {
      total: 1,
      perUser: 1,
    },
    validFrom: new Date(),
    validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
    applicableUsers: [userId],
    firstOrderOnly: true,
    isAutoGenerated: true,
    campaign: {
      name: "Welcome Campaign",
      type: "welcome",
    },
    createdBy,
  });
  
  return welcomeCoupon.save();
};

// Indexes
couponSchema.index({ code: 1 }, { unique: true });
couponSchema.index({ isActive: 1, validFrom: 1, validUntil: 1 });
couponSchema.index({ applicableUsers: 1 });
couponSchema.index({ createdAt: -1 });
couponSchema.index({ usageCount: 1, 'usageLimit.total': 1 });

const CouponModel = mongoose.model("Coupon", couponSchema);

module.exports = CouponModel;